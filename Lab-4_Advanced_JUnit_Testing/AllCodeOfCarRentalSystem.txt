package code;

/**
 * Class to save all the car details This class contains all the calculations
 * and details of the car It extends Vehicle so it has all the features of a
 * vehicle
 */

public class Car extends Vehicle {

	private double rentRate = 78;
	private double lateFee;
	private int seats = 0;

	Car(String VehicleId, int Year, String Make, String Model, int status, VehicleType vehicleType) {
		super(VehicleId, Year, Make, Model, status, vehicleType);
		seats = vehicleType.getCarSeats();
		if (seats == 7)
			rentRate = 113;
	}

	/**
	 * Used to add either cars or vans to the list
	 * 
	 * @param endDate,startDate accepts start date and end date
	 * @return lateFee the late fee
	 */
	public double getLateFee(DateTime endDate, DateTime startDate) {

		if (DateTime.diffDays(endDate, startDate) > 0)
			this.lateFee = 1.25 * this.rentRate * DateTime.diffDays(endDate, startDate);
		else
			this.lateFee = 0.0;
		return this.lateFee;
	}

	/**
	 * Used to add either cars or vans to the list
	 * 
	 * @param returnDate accepts the date as ro when it has to be returned
	 * @return Returns true if returned else false with appropriate messages
	 */
	public boolean returnVehicle(DateTime returnDate) {
		String vehicleType;
		if (this.Vehicle_id.contains("C_"))
			vehicleType = "car";
		else
			vehicleType = "van";
		if (this.vehicleStatus != 0) {
			DateTime estdate = this.records[this.getLastElementIndex()].getEstimatedReturnDate();
			DateTime rentDate = this.records[this.getLastElementIndex()].getRentDate();
			if (vehicleType.equals("car") && DateTime.diffDays(returnDate, estdate) < 0 && DateTime.diffDays(returnDate,
					rentDate) < this.vehicleType.canBeRentedForMinimumDays(rentDate, vehicleType)) {
				return false;
			}

			else {

				this.records[this.getLastElementIndex()].setData(returnDate,
						this.rentRate * DateTime.diffDays(returnDate, rentDate), this.getLateFee(returnDate, estdate));
				this.vehicleStatus = 0;
				return true;
			}
		} else {
			return false;
		}
	}

	/**
	 * sets the vehicle status to available after maintenance
	 * 
	 * @return Returns true if returned else false
	 */
	public boolean completeMaintenance() {
		if (super.vehicleStatus != 2)
			return false;
		this.vehicleStatus = 0;
		return true;
	}

	/**
	 * Method used to get details of car with their rental history Prints the rental
	 * record of car
	 */
	public String getDetails() {
		String details = super.getDetails();
		if (this.records[0] == null) {
			details += "\nRENTAL RECORD:\tempty";
		} else {
			details += "\nRENTAL RECORD\n";
			int count = 0;
			for (int index = 0; this.records[index] != null; index++)
				count++;
			for (int index = count - 1; index >= 0; index--) {
				details += this.records[index].getDetails() + "                     \n";
				for (int innerIndex = 0; innerIndex < 10; innerIndex++)
					details += "-";
				details += "                     \n";
			}
		}
		return details;
	}

}

package code;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.sql.Date;


public class DateTime {

	private long advance;
	private long time;

	public DateTime() {
		time = System.currentTimeMillis();
	}

	public DateTime(int setClockForwardInDays) {
		advance = ((setClockForwardInDays * 24L + 0) * 60L) * 60000L;
		time = System.currentTimeMillis() + advance;
	}

	public DateTime(DateTime startDate, int setClockForwardInDays) {
		advance = ((setClockForwardInDays * 24L + 0) * 60L) * 60000L;
		time = startDate.getTime() + advance;
	}

	public DateTime(int day, int month, int year) {
		setDate(day, month, year);
	}

	public long getTime() {
		return time;
	}
	
	// get the name of the day of thi DateTime object
	public String getNameOfDay() {
		SimpleDateFormat sdf = new SimpleDateFormat("EEEE");
		return sdf.format(time);
	}

	public String toString() {
		return getFormattedDate();
	}

	public static String getCurrentTime() {
		Date date = new Date(System.currentTimeMillis()); // returns current Date/Time
		return date.toString();
	}

	public String getFormattedDate() {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		long currentTime = getTime();
		Date gct = new Date(currentTime);

		return sdf.format(gct);
	}

	public String getEightDigitDate() {
		SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy");
		long currentTime = getTime();
		Date gct = new Date(currentTime);

		return sdf.format(gct);
	}

	// returns difference in days
	public static int diffDays(DateTime endDate, DateTime startDate) {
		final long HOURS_IN_DAY = 24L;
		final int MINUTES_IN_HOUR = 60;
		final int SECONDS_IN_MINUTES = 60;
		final int MILLISECONDS_IN_SECOND = 1000;
		long convertToDays = HOURS_IN_DAY * MINUTES_IN_HOUR * SECONDS_IN_MINUTES * MILLISECONDS_IN_SECOND;
		long hirePeriod = endDate.getTime() - startDate.getTime();
		double difference = (double) hirePeriod / (double) convertToDays;
		int round = (int) Math.round(difference);
		return round;
	}

	private void setDate(int day, int month, int year) {

		Calendar calendar = Calendar.getInstance();
		calendar.set(year, month - 1, day, 0, 0);

		java.util.Date date = calendar.getTime();

		time = date.getTime();
	}

	// Advances date/time by specified days, hours and mins for testing purposes
	public void setAdvance(int days, int hours, int mins) {
		advance = ((days * 24L + hours) * 60L) * 60000L;
	}
}

package code;

public class RentalRecord extends DateTime{
    private String RentId;
    private DateTime RentDate;
    private DateTime EstimatedReturnDate;
    private DateTime ActualReturnDate;
    private Double RentalFee;
    private Double LateFee;

    RentalRecord(String RentId,DateTime Rentdate,DateTime EstimatedReturnDate)
    {
        this.RentId=RentId;
        this.RentDate=Rentdate;
        this.EstimatedReturnDate=EstimatedReturnDate;
    }

    public void setData(DateTime ActualDate,Double RentalFee,Double LateFee)
    {
        this.ActualReturnDate=ActualDate;
        this.RentalFee=RentalFee;
        this.LateFee=LateFee;
    }
    public DateTime getEstimatedReturnDate() {
        return this.EstimatedReturnDate;
    }

    public DateTime getRentDate()
    {
        return this.RentDate;
    }

    public String toString()
    {
        if(this.ActualReturnDate==null && this.RentalFee==null && this.LateFee==null){
            String data = this.RentId+":"+this.RentDate.toString()+":"+this.EstimatedReturnDate.toString()+":none:none:none";
            return data;
        }
        else{
           return this.RentId+":"+this.RentDate.toString()+":"+this.EstimatedReturnDate.toString()+":"+this.ActualReturnDate.toString()+":"+this.RentalFee.toString()+":"+this.LateFee.toString();
        }
    }

    public String getDetails()
    {
        if(this.ActualReturnDate==null && this.RentalFee==null && this.LateFee==null) {
            String data =
                        "Record ID:             " + this.RentId
                    + "\nRent Date:             " + this.RentDate.toString()
                    + "\nEstimated Return Date: " + this.EstimatedReturnDate.toString();

            return data;
        }
        else{
            return      "Record ID:             " + this.RentId
                    + "\nRent Date:             " + this.RentDate.toString()
                    + "\nEstimated Return Date: " + this.EstimatedReturnDate.toString()
                    + "\nActual Return Date:    "+this.ActualReturnDate.toString()
                    + "\nRental Fee:            "+String.format ("%.2f", this.RentalFee)+
                      "\nLate Fee:              "+String.format("%.2f",this.LateFee);
        }
    }
	
	
}

package code;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;


public class RentSystem {

	private Car cars[] = new Car[50];
    private Van vans[] = new Van[50];

	public static DateFormat format = new SimpleDateFormat("dd/MM/yyyy"); //Basic format expected from the User

	/**
	 * This the method called from main method
	 * this contains the menudriven interface to communicate with the user
	 */
    public void run() {

		while (true) {

			System.out.println("\n**** RENT SYSTEM MENU ****\n");
			System.out.println("Add vehicle:            1");
			System.out.println("Rent vehicle:           2");
			System.out.println("Return vehicle:         3");
			System.out.println("Vehicle Maintenance:    4");
			System.out.println("Complete Maintenance:   5");
			System.out.println("Display All Vehicles:   6");
			System.out.println("Exit Program:           7");
			System.out.println("Enter your choice:");
			Scanner sc= new Scanner(System.in);
			int choice = Integer.parseInt(sc.nextLine());

			switch (choice) {
				case 1:
					this.add(sc); //Method used to add either cars or vans
					break;
				case 2:
					this.rent(sc); //Method used to rent either cars or vans
					break;
				case 3:
					this.returnCar(sc); //Method used to return a car after being rented
					break;
				case 4:
					this.vehicleMaintenance(sc); //Method used to set either car or van to maintenance
					break;
				case 5:
					this.completeMaintenance(sc);  //Method used to complete the maintenance
					break;
				case 6:
					this.getDetails();  //Method used to get the details of cars or vans if present
					break;
				case 7:
					sc.close(); //Closing the scanner if 7 is selected by the user
					return;

			}

		}
	}

	/**
	 * Used to add either cars or vans to the list
	 * @param //Scanner variable
	 * @return adds either car or van if the details are correct
	 */
    private void add(Scanner scan)
    {
		int i=0;
		String vehicleID="";
		int seats=0;
		String maintenanceDate=null;
//		int perDayRent=0;
		System.out.print("Vehicle Type(Van or Car): ");
		String vehicleType = scan.nextLine();
		while (!(vehicleType.equalsIgnoreCase("car") ||vehicleType.equalsIgnoreCase("van")))
		{
			System.out.print("Please enter either van or car: ");
			vehicleType = scan.nextLine();
		}
		System.out.print("Year: ");
		int year = Integer.parseInt(scan.nextLine());
		while (year<0 || year >2024)
		{
			System.out.println("Please enter a valid year");
			year=Integer.parseInt(scan.nextLine());
		}

		System.out.print("Maker: ");
		String make = scan.nextLine();
		System.out.print("Model: ");
		String model = scan.nextLine();

		if(vehicleType.equals("car")) {
			System.out.print("Vehicle ID: C_");
			vehicleID = scan.nextLine();
			vehicleID = "C_"+vehicleID;
			if(this.cars[0]!=null && vehicleID.contains("C_"))
			{
				for(i=0;this.cars[i]!=null;i++){
					if ((this.cars[i].getVehicleId()).equals(vehicleID))
					{
						System.out.println("ID Already used, Please add a new vehicle");
						return;
					}
				}
			}
			System.out.print("Number of seats: ");
			seats = Integer.parseInt(scan.nextLine());
			while ((seats != 4 && seats != 7)) {
				System.out.println("Please enter seats as either 4 or 7");
				seats = Integer.parseInt(scan.nextLine());
			}
			if(i<50){
				Vehicle newVehicle= new Car(vehicleID,year,make,model,0,new VehicleType(seats));
				this.cars[i]= (Car) newVehicle;
				System.out.println(newVehicle.toString());
			}
		}
		if(vehicleType.equalsIgnoreCase("van"))
		{
			System.out.print("Vehicle ID: V_");
			vehicleID = scan.nextLine();
			vehicleID="V_"+vehicleID;
			if(this.vans[0]!=null && vehicleID.contains("V_"))
			{
				for(i=0;this.vans[i]!=null;i++){
					if ((this.vans[i].getVehicleId()).equals(vehicleID))
					{
						System.out.println("ID Already used, Please add a new vehicle");
						return;
					}
				}
			}
			seats = 15;
			System.out.print("Last Maintenance (dd/mm/yyyy): ");
			maintenanceDate = scan.next();
			format.setLenient(false);
			while(maintenanceDate.trim().length() != ((SimpleDateFormat) format).toPattern().length())
			{
				System.out.println("Please enter a valid date in the format dd/mm/yyyy: ");
				maintenanceDate = scan.nextLine();
			}
			String dateSplit[] = maintenanceDate.split("/");
			DateTime Lastmain= new DateTime(Integer.parseInt(dateSplit[0]),Integer.parseInt(dateSplit[1]),Integer.parseInt(dateSplit[2]));
			if(i<50){
				Vehicle newVehicle= new Van(vehicleID,year,make,model,0,new VehicleType(seats,Lastmain));
				this.vans[i]= (Van) newVehicle;
				System.out.println(newVehicle.toString());
			}
		}


    }


	/**
	 * Used to rent either available car or available van
	 * @param //Scanner variable
	 * @return Rents a car or van if the details are correct
	 */
	private void rent(Scanner sc)
	{
		System.out.print("Vehicle id: ");
		String id = sc.nextLine();
		String type="";

		if(id.contains("C_") && this.cars[0]==null)
		{
			System.out.println("There are no cars currently at the moment.");
			return;
		}
		if(id.contains("V_") && this.vans[0]==null)
		{
			System.out.println("There are no vans currently at the moment.");
			return;
		}
		if(this.cars[0]!=null && id.contains("C_"))
        {
			boolean flag =false;
            for(int i=0;this.cars[i]!=null;i++){
                if ((this.cars[i].getVehicleId()).equals(id))
                {
					if(this.cars[i].vehicleStatus!=0)
					{
						System.out.println("The car with ID : "+id+" is already either rented or under maintenance, please choose another car.");
						return;
					}

				   type="car";
                   flag=true;
				   break;
                }
            }
			if(!flag)
			{
				System.out.println("ID is incorrect, please try again!");
				return;
			}
        }
		if(this.vans[0]!=null && id.contains("V_"))
        {
			boolean flag =false;
            for(int i=0;this.vans[i]!=null;i++){
                if ((this.vans[i].getVehicleId()).equals(id))
                {
					if(this.vans[0].vehicleStatus!=0)
					{
						System.out.println("The van with ID : "+id+" is already either rented or under maintenance. \nPlease choose another van.");
						return;
					}
					type="van";
                   flag=true;
				   break;
                }
            }
			if(!flag)
			{
				System.out.println("Id is incorrect, please try again!");
				return;
			}
        }
		if(!(id.contains("V_") || id.contains("C_")))
		{
			System.out.println("Please Enter a Valid ID either starting from 'V_' or 'C_'.");
			return;
		}

	System.out.print("Customer ID: ");
	String cusId = sc.next();
	System.out.print("Rent date( dd/mm/yyyy): ");
	String date = sc.next();
		format.setLenient(false);
		while(date.trim().length() != ((SimpleDateFormat) format).toPattern().length())
		{
			System.out.println("Please enter a valid date in the format dd/mm/yyyy: ");
			date = sc.nextLine();
		}
	String dates[] = date.split("/");
	DateTime rentDate= new DateTime(Integer.parseInt(dates[0]),Integer.parseInt(dates[1]),Integer.parseInt(dates[2]));
	System.out.print("How many days?: ");
	int days= sc.nextInt();
	if(type.equals("car")) {
		for(int i=0;this.cars[0]!=null;i++){
                if ((this.cars[i].getVehicleId()).equals(id))
                {
				   if(this.cars[i].rent(cusId,rentDate,days))
				   break;
			       else{
					   System.out.println("Vehicle "+id+" could not be rented.");
					   return;
				   }
                }
            }
		System.out.println("Vehicle "+id+" is now rented by customer "+cusId);
	}
	
	if(type.equals("van")) {
		for(int i=0;this.vans[i]!=null;i++){
                if ((this.vans[i].getVehicleId()).equals(id))
                {
				   if(this.vans[i].rent(cusId,rentDate,days))
				   break;
			       else{
					   System.out.println("Vehicle "+id+" could not be rented");
					   return;
				   }
                }
            }
		System.out.println("Vehicle "+id+" is now rented by customer "+cusId);
	}

	}

	/**
	 * Used to return a rented car or van
	 * @param //Scanner variable
	 * @return prints the details of the car along with rental fee and charges if it is returned late
	 */
	private void returnCar(Scanner sc)
	{
		System.out.print("VehicleId: ");
		String id = sc.next();

		if(this.cars[0]==null && id.contains("C_") )
		{
			System.out.println("There are no cars, please add cars.");
			return;
		}
		else if(this.vans[0]==null && id.contains("V_"))
		{
			System.out.println("There are no vans, please add vans.");
			return;
		}
		else if(this.cars[0]!=null && id.contains("C_"))
        {

			boolean flag =false;
            for(int i=0;this.cars[i]!=null;i++){

                if ((this.cars[i].getVehicleId()).equals(id))
                {
				   System.out.print("Return date( dd/mm/yyyy): ");
				   String date = sc.next();
				   String dates[] = date.split("/");
				   DateTime returnDate= new DateTime(Integer.parseInt(dates[0]),Integer.parseInt(dates[1]),Integer.parseInt(dates[2]));
				   if(this.cars[i].returnVehicle(returnDate)){
					   System.out.println(this.cars[i].records[this.cars[i].getLastElementIndex()].getDetails());
				   }
				   else{
					   System.out.println("Vehicle cannot be returned as it may have been never rented");
					   return;
				   }
                   flag=true;
				   break;
                }

            }
			if(!flag)
			{
				System.out.println("Id is incorrect");
				return;
			}
        }
		else if(this.vans[0]!=null && id.contains("V_"))
        {
			boolean flag =false;
            for(int i=0;this.vans[i]!=null;i++){
                if ((this.vans[i].getVehicleId()).equals(id))
                {
					System.out.print("Return date( dd/mm/yyyy): ");
					String date = sc.next();
					String dates[] = date.split("/");
					DateTime returndate= new DateTime(Integer.parseInt(dates[0]),Integer.parseInt(dates[1]),Integer.parseInt(dates[2]));
					if(this.vans[i].returnVehicle(returndate)){
					   System.out.println(this.vans[i].records[this.vans[i].getLastElementIndex()].getDetails());
				   }
				   else{
					   System.out.println("Vehicle cannot be returned");
					   return;
				   }
					flag=true;
					break;
                }
            }
			if(!flag)
			{
				System.out.println("Id is incorrect");
				return;
			}
        }		
	}

	/**
	 * Method used to set either car or van to maintenance
	 * @param //Scanner variable
	 * @return prints appropriate message if sent for maintenance
	 */
	
	private void vehicleMaintenance(Scanner sc){
		System.out.print("Vehicle id: ");
		String id = sc.next();
		if(this.cars[0]==null )
		{
			System.out.println("There are no cars, please add cars.");
			return;
		}
		if(this.vans[0]==null )
		{
			System.out.println("There are no vans, please add cars.");
			return;
		}
		
		if(this.cars[0]!=null && id.contains("C_"))
        {
			boolean flag =false;
            for(int i=0;this.cars[i]!=null;i++){
                if ((this.cars[i].getVehicleId()).equals(id))
                {
				   if(this.cars[i].performMaintenance())
					   System.out.println("Vehicle "+id+" is now under maintenance");
				   else{
					   System.out.println("Vehicle "+id+" could not be sent for maintenance");
					   return;
				   }
                   flag=true;
				   break;
                }
            }
			if(!flag)
			{
				System.out.println("Id is incorrect");
				return;
			}
        }
		if(this.vans[0]!=null && id.contains("V_"))
        {
			boolean flag =false;
            for(int i=0;this.vans[i]!=null;i++){
                if ((this.vans[i].getVehicleId()).equals(id))
                {
					if(this.vans[i].performMaintenance())
					   System.out.println("Vehicle "+id+" is now under maintenance");
				   else{
					   System.out.println("Vehicle "+id+" could not be sent for maintenance");
					   return;
				   }
					flag=true;
					break;
                }
            }
			if(!flag)
			{
				System.out.println("Id is incorrect");
				return;
			}
        }		
	}

	/**
	 * Method used to complete maintenance of either car or van
	 * @param //Scanner variable
	 * @return prints appropriate message after completing maintenance
	 */
	private void completeMaintenance(Scanner sc)
	{
		System.out.print("Enter vehicle ID: ");
		String id = sc.next();
		if(this.cars[0]==null )
		{
			System.out.println("There are no cars, please add cars.");
			return;
		}
		if(this.vans[0]==null )
		{
			System.out.println("There are no vans, please add cars.");
			return;
		}
		if(this.cars[0]!=null && id.contains("C_"))
        {
			boolean flag =false;
            for(int i=0;this.cars[i]!=null;i++){
                if ((this.cars[i].getVehicleId()).equals(id))
                {
				    System.out.print("Maintenance completion date (dd/mm/yyyy): ");
				   if(this.cars[i].completeMaintenance())
					   System.out.println("Vehicle "+id+" has all maintenance completed and ready for rent");
				   else{
					   System.out.println("Vehicle "+id+" could not complete maintenance");
					   return;
				   }
                   flag=true;
				   break;
                }
            }
			if(!flag)
			{
				System.out.println("ID is incorrect, Please try again");
				return;
			}
        }
		if(this.vans[0]!=null && id.contains("V_"))
        {
			boolean flag =false;
            for(int i=0;this.vans[i]!=null;i++){
                if ((this.vans[i].getVehicleId()).equals(id))
                {
					System.out.print("Maintenance completion date (dd/mm/yyyy) :");
				    String date = sc.next();
					String dates[] = date.split("/");
					DateTime maintenanceDate= new DateTime(Integer.parseInt(dates[0]),Integer.parseInt(dates[1]),Integer.parseInt(dates[2]));
					if(this.vans[i].completeMaintenance(maintenanceDate))
					   System.out.println("Vehicle "+id+" has all maintenance completed and ready for rent");
				   else{
					   System.out.println("Vehicle "+id+" could not complete maintenance");
					   return;
				   }
					flag=true;
					break;
                }
            }
			if(!flag)
			{
				System.out.println("Id is incorrect");
				return;
			}
        }		
	}

	/**
	 * Method used to get details of car or van with their rental history
	 */
	
	private void getDetails()
	{
		if(cars[0]!=null && vans[0]!=null)
		{
			System.out.println("There are no cars or vans to display, please enter some vehicles and try again");
			return;
		}
		if(cars[0]!=null)
		{
			System.out.println("***********Cars**********");
			for (int i = 0; this.cars[i] != null; i++)
				System.out.println(this.cars[i].getDetails());
		}
		if(vans[0]!=null)
		{
			System.out.println("***********Vans**********");
			for (int i = 0; this.vans[i] != null; i++)
				System.out.println(this.vans[i].getDetails());
		}
	}
	
}


package code;




public class Start {
	public static void main(String[] args)
	{
		RentSystem rentSystem =new RentSystem();
		rentSystem.run();
	}

}

package code;




public class Start {
	public static void main(String[] args)
	{
		RentSystem rentSystem =new RentSystem();
		rentSystem.run();
	}

}


package code;

public class Vehicle {
    protected String Vehicle_id;
    protected int Year;
    protected String Make;
    protected String Model;
    protected int vehicleStatus;
    protected VehicleType vehicleType;
    protected RentalRecord records[]= new RentalRecord[10];

    // Constructor to accept the details of a vehicle
    Vehicle(String VehicleId,int Year,String Make,String Model,int status,VehicleType vehicleType){
        this.Vehicle_id=VehicleId;
        this.Year=Year;
        this.Make=Make;
        this.Model= Model;
        this.vehicleStatus=status;
        this.vehicleType=vehicleType;
    }

    /**
     * Method to get vehicle ID
     */
    public String getVehicleId(){
        return this.Vehicle_id;
    }

    /**
     * Used to rent either available car or available van
     * @param customerId,rentDate,numOfRentDay accepts customeID, date of rent, no of renting days
     * @return True or false as to vehicle is successfully rented or not
     */
    public boolean rent(String customerId, DateTime rentDate, int numOfRentDay)
    {
          String typeOfVehicle;
          if(this.Vehicle_id.contains("C_"))
              typeOfVehicle="car";
          else
              typeOfVehicle="van";
          if(this.vehicleStatus!=0 || numOfRentDay<this.vehicleType.canBeRentedForMinimumDays(rentDate,typeOfVehicle) || numOfRentDay>=14||numOfRentDay<2)
          {
              return false;
          }
          else if( typeOfVehicle.equals("van") )
          {
			  if(this.vehicleStatus!=0 || this.vehicleType.IsUnderMaintenance(rentDate,typeOfVehicle,numOfRentDay) ||  numOfRentDay==0)
              return false;
		      else
			  {
			  String rentId= this.Vehicle_id+"_"+customerId+"_"+rentDate. getEightDigitDate();
              this.records[this.getLastElementIndex()+1]=new RentalRecord(rentId,rentDate,new DateTime(rentDate,numOfRentDay));
              this.vehicleStatus=1;
              return true;
			  }
          }
          else {
              String rentId= this.Vehicle_id+"_"+customerId+"_"+rentDate. getEightDigitDate();
              this.records[this.getLastElementIndex()+1]=new RentalRecord(rentId,rentDate,new DateTime(rentDate,numOfRentDay));
              this.vehicleStatus=1;
              return true;
          }
    }
    /**
     * sets the vehicle status to available after maintenance
     * @return Returns true if returned else false
     */
    public boolean performMaintenance()
    {
        if(this.vehicleStatus==1 || this.vehicleStatus==2)
            return false;
        this.vehicleStatus=2;
        return true;
    }
    /**
     * Method used to get details of vehicle
     */
    public String toString()
    {
        String repository="";
        if(this.Vehicle_id.contains("V_"))
        {
            repository=this.Vehicle_id+":"+String.valueOf(this.Year)+":"+this.Make+":"+this.Model+":15"+":";
        }
        if(this.Vehicle_id.contains("C_")) {
            repository = this.Vehicle_id + ":" + String.valueOf(this.Year) + ":" + this.Make + ":" + this.Model + ":" + String.valueOf(this.vehicleType.getSeats("car")) + ":";
        }
        switch(this.vehicleStatus)
        {
            case 0:repository+="Available";
                break;
            case 1: repository+="Rented";
                break;
            case 2: repository+="Maintenance";
                break;
        }
        return repository;
    }

    /**
     * Method used to get details of car or van with their rental history
     */
    public String getDetails()
    {
        String data = "Vehicle ID:\t"+this.Vehicle_id+"\n Year:\t "+String.valueOf(this.Year)+"\n Make:\t"+this.Make+"\n Model:\t"+this.Model+"\n Number of Seats:\t";
		if(this.Vehicle_id.contains("C_"))
			data+=String.valueOf(this.vehicleType.getSeats("car"))+"\n Status:\t";
		else {
            data += String.valueOf(this.vehicleType.getSeats("van")) + "\n Status:\t";
        }
        switch(this.vehicleStatus)
        {
            case 0:data+="Available";
                break;
            case 1: data+="Rented";
                break;
            case 2: data+="Maintenance";
                break;
        }
        return data;

    }

    /**
     * Method used to get last element index
     */
    public int getLastElementIndex()
	{
		int index=0;
		for(index=0;this.records[index]!=null;index++);
		return index-1;
	}
}

package code;

class VehicleType {

    private int carSeats;
    private int vanSeats=15;
    private DateTime LastMaintenance;
    private String[] days = {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};

    //Constructor of Car type
    VehicleType(int seats)
    {
        this.carSeats=seats;
    }
    //Constructor for Van type
    VehicleType(int seats,DateTime LastMaintenance){
        this.vanSeats=seats;
        this.LastMaintenance=LastMaintenance;
    }
    /**
     * @param type
     * method to get seats of vehicle by accepting type of vehicle
     */
    public int getSeats(String type)
    {
        if(type.equals("car")){
            return this.carSeats;
        }
        else{
            return this.vanSeats;
        }
    }

    /**
     * method to get seats of vehicle
     */
    public int getCarSeats()
    {
        return this.carSeats;
    }

    /**
     * method to set seats of vehicle by accepting seats
     */
    public void setCarSeats(int seats)
    {
        this.carSeats=seats;
    }

    /**
     * method to get index from the days array
     */
    private int indexOf(String day){
        for(int index=0;index<days.length;index++)
            if(days[index].equals(day))
                return index;
        return -1;
    }

    /**
     * method to get Last Maintenance
     */
    public DateTime getLastMaintenance(){
        return this.LastMaintenance;
    }

    /**
     * method to set Last Maintenance
     */
    public void setLastMaintenance(DateTime date)
    {
        this.LastMaintenance=date;
    }

    /**
     * @param date,type
     * checking which day the vehicle is being rented and setting minimum days it can be rented
     * method to check whether a vehicle can be rented for a specific number of days
     */
    public int canBeRentedForMinimumDays(DateTime date,String type)
    {
        if(this.indexOf(date.getNameOfDay())+1<=5 && this.indexOf(date.getNameOfDay())+1>=1 && type.equals("car")){
            return 2;
        }
        else if(type.equals("car")){
            return 3;
        }
        else{
            return 1; //van can be rented only 1 day
        }
    }

    /**
     * @param rentDate,type,numOfRentDays
     * method to check whether a vehicle is under maintenance or not
     * @return true or false based on the input
     */
    public boolean IsUnderMaintenance(DateTime rentDate,String type,int numOfRentDays)
    {
        DateTime nextMaintenance=new DateTime(this.LastMaintenance,12);
        if(type.equals("van") && DateTime.diffDays(nextMaintenance,new DateTime(rentDate,numOfRentDays))>=0 && numOfRentDays<=12)
        {
            return false;
        }
		if(type.equals("car"))
		{
			return false;
		}
        else
        {
            return true;
        }
    }
}
